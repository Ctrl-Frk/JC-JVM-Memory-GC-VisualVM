public class JvmComprehension {
    // При запуске программы JVM отправит запрос в ClassLoaders (систему загрузки классов)
    // на загрузку классов: JvmComprehension, Object, Integer, System
    // Система загрузки классов состоит из 3-х уровней:
    // 1. Application ClassLoader - классы приложения
    // 2. Platform ClassLoader - классы из пакета java.util
    // 3. Bootstrap ClassLoader - базовые классы Java (классы из пакета Java, кроме java.util)
    // Первым начнет поиск (в своем кэше) Application ClassLoader, если не найдет - отдаст на поиск по цепочке.
    // Если классы не закешированы, поиск и загрузка класса начнется в обратном порядке (Bootstrap - Platform - Application)
    // Если не найдут - получим ClassNotFoundException

    // Когда все классы будут загружены:
    // 1. Verify - проверка валидности кода
    // 2. Prepare - подготовка. Выделение места под статические поля
    // 3. Resolve - разрешение символьных ссылок.

    public static void main(String[] args) {
        int i = 1;                      // 1. В стеке создастся фрейм "main". В него будет помещена переменная i со значением 1,
        // т.к. примитивный тип

        Object o = new Object();        // 2. Оператор "new" - выделит память под объект в куче. Затем будет вызван конструктор Object()
        // По адресу, где была выделена память в куче, будет создан объект типа Object. А Переменная "o" с адресом объекта будет
        // сохранена в стэке, во фрейме "main"

        Integer ii = 2;                 // 3. Переменная ii - в стеке, во фрейме "main". Объект Integer со значением 2 - в куче.
        // т.к. ссылочный тип

        printAll(o, i, ii);             // 4. Вызов метода. В стеке создастся новый фрейм "printAll". В этом фрейме будут
        // созданы новые переменные "i" со значением 1. В переменные "o" и "ii" будут присвоены ссылки на соответствующие объекты
        System.out.println("finished"); // 7. Уничтожение фрейма "printAll". Сборщик удаляет остатки.
        // Создание нового фрейма println в стеке. Создание объекта String со значением "finished" в куче.
        // Ссылку на объект передаем в "println". После отработки - закрытие фрейма. Сборщик чистит остатки (String из кучи)
    }
    // 8. Закрыватся фрейм "main". Чистятся переменные "i", "o", "ii" из стека
    // Удаляются Object, Integer из кучи

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5. Integer со значением "700" - в куче.
        // Переменная "uselessVar" с адресом этого объекта - в стеке

        System.out.println(o.toString() + i + ii);  // 6. Новый фрейм "println". Создание новых переменных в нем ("i" со
        // значением 1. Присвоение ссылок на соответствующие объекты в "o" и "ii".
        // Создание фрейма "toString". Необходимые вычисления. Как закончит - сборщик может чистить остатки фрейма "toString"
        // Когда отработает фрейм "println" - сборщик может чистить его остатки
    }
}